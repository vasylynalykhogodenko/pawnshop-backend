'use strict';
debugger;

class RandomizedSet {
  constructor() {
    this.valMap = new Map();
    this.valList = [];
  }

  insert (val) {
    if (this.valMap.has(val)) {
      return false;
    }

    this.valMap.set(val, this.valList.length);
    this.valList.push(val);
    return true;
  }

  remove (val) {
    if (!this.valMap.has(val)) {
      return false;
    }

    const indexToRemove = this.valMap.get(val);
    const lastElement = this.valList[this.valList.length - 1];

    // Swap the element to remove with the last element
    this.valList[indexToRemove] = lastElement;
    if (indexToRemove !== this.valList.length -1) { //avoid self swap
        this.valMap.set(lastElement, indexToRemove); // Update index of last element
    }

    this.valList.pop(); // Remove the last element (now the one to remove)
    this.valMap.delete(val); // Remove the value from the map
    return true;
  }

  getRandom () {
    const randomIndex = Math.floor(Math.random() * this.valList.length);
    return this.valList[randomIndex];
  }
}

const RandomizedSet1 = new RandomizedSet([2, 1]);
RandomizedSet1.insert();
